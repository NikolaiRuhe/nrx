# nrx - https://github.com/NikolaiRuhe/nrx
# copyright 2016, Nikolai Ruhe

# Invalid Syntax

empty                                  #                                              #   PARSER_ERROR
empty expression                       #   ()                                         #   PARSER_ERROR
invalid token                          #   $0                                         #   PARSER_ERROR
unexpected token                       #   )                                          #   PARSER_ERROR
unexpected token                       #   ]                                          #   PARSER_ERROR
unexpected token                       #   *                                          #   PARSER_ERROR
unexpected token                       #   /                                          #   PARSER_ERROR
unexpected token                       #   %                                          #   PARSER_ERROR
unexpected token                       #   +                                          #   PARSER_ERROR
unexpected token                       #   ?                                          #   PARSER_ERROR
unexpected token                       #   ]                                          #   PARSER_ERROR
two expressions                        #   1 2                                        #   PARSER_ERROR


# Primary Expressions

int literal                            #   1                                          #   1
float literal 0.1                      #   0.1                                        #   0.1
float literal 1.0                      #   1.0                                        #   1
string literal                         #   "default"                                  #   "default"
bool literal                           #   true                                       #   true
null literal                           #   NULL                                       #   NULL

empty list literal                     #   []                                         #   []
list literal                           #   [1 ]                                       #   [1]
list literal                           #   [1, ]                                      #   [1]
list literal                           #   [1, 2, 3 ]                                 #   [1, 2, 3]
list literal                           #   [1, 2, 3, ]                                #   [1, 2, 3]
list literal                           #   [1, 0.2, "abc", false, [0], [1:2], $abc]   #   [1, 0.2, "abc", false, [0], [1:2], $abc]
list literal                           #   [1, 0.2, "abc", false, [0], [1:2], $abc, ] #   [1, 0.2, "abc", false, [0], [1:2], $abc]
malformed list literal                 #   [                                          #   PARSER_ERROR
malformed list literal                 #   [,]                                        #   PARSER_ERROR
malformed list literal                 #   [ /* 1 */, 2, 3]                           #   PARSER_ERROR

empty dict literal                     #   [:]                                        #   [:]
dict literal                           #   [1:2]                                      #   [1:2]
dict literal                           #   [1:2, ]                                    #   [1:2]
dict literal                           #   [1:2, 2:3, 3:4]                            #   [1:2, 2:3, 3:4]
dict literal                           #   [1:2, 2:3, 3:4, ]                          #   [1:2, 2:3, 3:4]
dict literal                           #   ["1":1, "0.2":0.2, "abc":"abc", "false":false, "[0]":[0], "[1:2]":[1:2], "$abc":$abc] #   ["1":1, "0.2":0.2, "abc":"abc", "false":false, "[0]":[0], "[1:2]":[1:2], "$abc":$abc]
dict literal                           #   ["1":1, "0.2":0.2, "abc":"abc", "false":false, "[0]":[0], "[1:2]":[1:2], "$abc":$abc, ] #   ["1":1, "0.2":0.2, "abc":"abc", "false":false, "[0]":[0], "[1:2]":[1:2], "$abc":$abc]
malformed dict literal                 #   [ 1;                                       #   PARSER_ERROR
malformed dict literal                 #   [ 1:2                                      #   PARSER_ERROR
malformed dict literal                 #   [ 1:2, 1 2]                                #   PARSER_ERROR
malformed dict literal                 #   [ 1: ]                                     #   PARSER_ERROR
malformed dict literal                 #   [ :1 ]                                     #   PARSER_ERROR
malformed dict literal                 #   [ 1:1, 1: ]                                #   PARSER_ERROR
malformed dict literal                 #   [ 1:1, :1 ]                                #   PARSER_ERROR
malformed dict literal                 #   [ 1:1:1 ]                                  #   PARSER_ERROR
malformed dict literal                 #   [ 1, 1:1 ]                                 #   PARSER_ERROR
malformed dict literal                 #   [ 1:1, 1 ]                                 #   PARSER_ERROR

single lookup                          #   $a                                         #   $a
multi lookup                           #   $$a                                        #   $$a
lookup chain                           #   $a$$b$c$$d                                 #   $a$$b$c$$d

identifier                             #   myName                                     #   myName

unaryMinus                             #   -a                                         #   (-a)
unaryMinus                             #   --a                                        #   (-(-a))
unaryMinus                             #   (-/* foo */a)                              #   (-a)
unaryNot                               #   !a                                         #   (!a)
unaryNot                               #   !!a                                        #   (!(!a))
unaryMix                               #   -!-!a                                      #   (-(!(-(!a))))
parenthesis                            #   (a)                                        #   a
parenthesis                            #   ((a))                                      #   a
malformed parenthesis                  #   (                                          #   PARSER_ERROR
malformed parenthesis                  #   )                                          #   PARSER_ERROR
malformed parenthesis                  #   () 1                                       #   PARSER_ERROR
malformed parenthesis                  #   -()                                        #   PARSER_ERROR
malformed parenthesis                  #   (-1+)                                      #   PARSER_ERROR


# Operators
# These are simple tests that make sure operators are implemented and basic errors are caught.

except operator                        #   1 except 2                                 #   (1 except 2)
conditional operator                   #   true ? "foo" : "bar"                       #   (true ? "foo" : "bar")
malformed conditional operator         #   true ?                                     #   PARSER_ERROR
malformed conditional operator         #   true ? "foo"                               #   PARSER_ERROR
malformed conditional operator         #   true ? "foo" :                             #   PARSER_ERROR
where operator                         #   1 where x : 2                              #   (1 where x : 2)
map operator                           #   1 map x : 2                                #   (1 map x : 2)
contains operator                      #   1 contains 2                               #   (1 contains 2)
logicOr operator                       #   1 || 2                                     #   (1 || 2)
lgicAnd operator                       #   1 && 2                                     #   (1 && 2)
equal operator                         #   1 = 2                                      #   (1 == 2)
equal operator                         #   1 == 2                                     #   (1 == 2)
notEqual operator                      #   1 != 2                                     #   (1 != 2)
greaterThan operator                   #   1 > 2                                      #   (1 > 2)
greaterOrEqual operator                #   1 >= 2                                     #   (1 >= 2)
lessThan operator                      #   1 < 2                                      #   (1 < 2)
lessOrEqual operator                   #   1 <= 2                                     #   (1 <= 2)
addition operator                      #   1 + 2                                      #   (1 + 2)
subtraction operator                   #   1 - 2                                      #   (1 - 2)
multiplication operator                #   1 * 2                                      #   (1 * 2)
division operator                      #   1 / 2                                      #   (1 / 2)
modulo operator                        #   1 % 2                                      #   (1 % 2)
call operator                          #   a()                                        #   (a())
call operator                          #   a(1)                                       #   (a(1))
call operator                          #   a(1, true, $a, "foo")                      #   (a(1, true, $a, "foo"))
malformed call operator                #   a(                                         #   PARSER_ERROR
malformed call operator                #   a(,)                                       #   PARSER_ERROR
malformed call operator                #   a(1,)                                      #   PARSER_ERROR
malformed call operator                #   a(1;)                                      #   PARSER_ERROR
access operator                        #   a.b                                        #   (a.b)
access operator                        #   a.b.c                                      #   ((a.b).c)
access operator                        #   1.b                                        #   (1.b)
access operator                        #   1.0.b                                      #   (1.b)
malformed access operator              #   a.0                                        #   PARSER_ERROR
malformed access operator              #   (a.)                                       #   PARSER_ERROR
subscript operator                     #   a[1]                                       #   (a->[1])
subscript operator                     #   [0][1]                                     #   ([0]->[1])
malformed subscript operator           #   a[a b                                      #   PARSER_ERROR


# Precedence
# In these tests correct binding of operators is assured. This means that 1 + 2 * 3 resolves to
# 1 + (2 * 3) and not (1 + 2) * 3.
# The rules for binding power are expressed as operator precedence and associativity.

precedence                             #   1 + 2 * 3                                  #   (1 + (2 * 3))
precedence                             #   (1 + 2) * 3                                #   ((1 + 2) * 3)
precedence                             #   1 + 2 - 3                                  #   ((1 + 2) - 3)
precedence                             #   1 + (2 - 3)                                #   (1 + (2 - 3))
precedence                             #   a * b + c * d % e - f                      #   (((a * b) + ((c * d) % e)) - f)
precedence                             #   -a+b                                       #   ((-a) + b)
precedence                             #   -a.b                                       #   (-(a.b))
precedence                             #   --a.b                                      #   (-(-(a.b)))
precedence                             #   --a % b                                    #   ((-(-a)) % b)
precedence                             #   (-a).b                                     #   ((-a).b)
precedence                             #   a.b.c                                      #   ((a.b).c)
precedence                             #   a[1].m(2)                                  #   (((a->[1]).m)(2))
precedence                             #   a[1 + 2]                                   #   (a->[(1 + 2)])
precedence                             #   -[1][0]                                    #   (-([1]->[0]))
precedence                             #   [-1()]                                     #   [(-(1()))]
precedence                             #   [[a]()[b],[c]]                             #   [(([a]())->[b]), [c]]
precedence                             #   a + b contains c + d && e                  #   (((a + b) contains (c + d)) && e)
precedence                             #   a ? b ? 1 : 2 : c ? 3 : 4                  #   (a ? (b ? 1 : 2) : (c ? 3 : 4))
many operators                         #   a || b && c == d != e > f >= g < h <= i + j - k * l / m % n ? 1 : 2 #   ((a || (b && ((c == d) != ((((e > f) >= g) < h) <= ((i + j) - (((k * l) / m) % n)))))) ? 1 : 2)

complex expression test                #   ((["1", "2", "1234", $foo, [], "Hello, World!", "\"", "1️⃣"] map element : NUMBER(element)) where each: each % 2 == 1).count # (((["1", "2", "1234", $foo, [], "Hello, World!", "\"", "1️⃣"] map element : (NUMBER(element))) where each : ((each % 2) == 1)).count)
